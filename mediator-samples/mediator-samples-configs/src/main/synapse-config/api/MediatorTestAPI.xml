<?xml version="1.0" encoding="UTF-8"?>
<api context="/mediators" name="MediatorTestAPI" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" url-mapping="/enrich">
        <inSequence>
            <log level="full">
                <property expression="$url:version" name="MI Version"/>
            </log>
            <enrich description="Append field &quot;count&quot;">
                <source clone="true" type="inline">{ "count": 0}</source>
                <target action="child" xpath="json-eval($)"/>
            </enrich>
            <log level="full"/>
            <enrich description="Replace existing value">
                <source clone="true" type="inline">10</source>
                <target xpath="json-eval($.count)"/>
            </enrich>
            <log level="full"/>
            <property name="COUNTER" scope="default" type="INTEGER" value="20"/>
            <enrich description="Replace by property. It doesn't work with 4.0.0">
                <source clone="true" type="inline">
                    <inline xmlns=""/>
                </source>
                <target xpath="json-eval($.count)"/>
            </enrich>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <respond/>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/foreach">
        <inSequence>
            <log level="full"/>
            <enrich>
                <source clone="true" type="inline">{ "processedItems":[]}</source>
                <target action="child" xpath="json-eval($)"/>
            </enrich>
            <foreach expression="json-eval($.items)" id="item">
                <sequence>
                    <log>
                        <property expression="json-eval($)" name="Item"/>
                        <property name="Message" value="Processing ..."/>
                    </log>
                </sequence>
            </foreach>
            <log>
                <property name="Message" value="Process done"/>
            </log>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <respond/>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/unzip">
        <inSequence>
            <log>
                <property expression="$trp:Content-Type" name="Content-Type"/>
            </log>
            <!-- 1. Reading the JSON attributes from the request payload; -->
            <switch source="$trp:Content-Type">
                <case regex="^(multipart\/form-data[; a-z=\-0-9]+)">
                    <propertyGroup>
                        <property expression="$body/mediate/fileContent/@filename" name="fileName" scope="default" type="STRING"/>
                        <property expression="$body/mediate/writeToDir" name="writeToDir" scope="default" type="STRING"/>
                    </propertyGroup>
                    <payloadFactory media-type="xml">
                        <format>
                            <ns:binary xmlns:ns="http://ws.apache.org/commons/ns/payload">$1</ns:binary>
                        </format>
                        <args>
                            <arg evaluator="xml" expression="$body/mediate/fileContent"/>
                        </args>
                    </payloadFactory>
                </case>
                <default>
                    <propertyGroup>
                        <property expression="json-eval($.fileName)" name="fileName" scope="default" type="STRING"/>
                        <property expression="json-eval($.fileContent)" name="fileContent" scope="default" type="STRING"/>
                        <property expression="json-eval($.writeToDir)" name="writeToDir" scope="default" type="STRING"/>
                    </propertyGroup>
                    <!-- 2. Creating the Payload for a binary payload. -->
                    <payloadFactory media-type="xml">
                        <format>
                            <ns:binary xmlns:ns="http://ws.apache.org/commons/ns/payload">$1</ns:binary>
                        </format>
                        <args>
                            <arg evaluator="xml" expression="$ctx:fileContent"/>
                        </args>
                    </payloadFactory>
                </default>
            </switch>
            <!-- 3. Even using a binary payload, the Axis2 frameworks keeps considering 
		the payload as text. We use a script mediator to set the fist node as binary; -->
            <script language="js"><![CDATA[var binaryNode =       
      mc.getEnvelope().getBody().getFirstElement().getFirstOMChild();  
   binaryNode.setBinary(true);]]></script>
            <log>
                <property expression="$ctx:fileName" name="fileName"/>
            </log>
            <propertyGroup>
                <property expression="$ctx:fileName" name="transport.vfs.ReplyFileName" scope="transport" type="STRING"/>
                <property name="OUT_ONLY" scope="default" type="STRING" value="true"/>
                <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
                <property name="messageType" scope="axis2" type="STRING" value="application/octet-stream"/>
            </propertyGroup>
            <switch source="$ctx:writeToDir">
                <case regex="^(\/home\/wso2carbon\/wso2mi-4.0.0[\/a-z]+)">
                    <call description="This writes the file to directory within MI_HOME dir, used for deployment a CAR apps">
                        <endpoint>
                            <address uri="$ctx:writeToDir">
                                <suspendOnFailure>
                                    <initialDuration>-1</initialDuration>
                                    <progressionFactor>1</progressionFactor>
                                </suspendOnFailure>
                                <markForSuspension>
                                    <retriesBeforeSuspension>0</retriesBeforeSuspension>
                                </markForSuspension>
                            </address>
                        </endpoint>
                    </call>
                </case>
                <default>
                    <call description="This writes the received file into a pre-configured directory">
                        <endpoint>
                            <address uri="$FILE:fileProcessing_tempDir">
                                <suspendOnFailure>
                                    <initialDuration>-1</initialDuration>
                                    <progressionFactor>1</progressionFactor>
                                </suspendOnFailure>
                                <markForSuspension>
                                    <retriesBeforeSuspension>0</retriesBeforeSuspension>
                                </markForSuspension>
                            </address>
                        </endpoint>
                    </call>
                </default>
            </switch>
            <file.unzip configKey="REPOSITORY_DATA_FILE_CONNECTION">
                <sourceFilePath>{$ctx:fileName}</sourceFilePath>
                <targetDirectory>sample</targetDirectory>
            </file.unzip>
            <file.unzip configKey="REPOSITORY_DATA_FILE_CONNECTION">
                <sourceFilePath>sample/openssl-3.0.1.tar</sourceFilePath>
                <targetDirectory>sample</targetDirectory>
            </file.unzip>
            <log>
                <property name="Message" value="Process done"/>
            </log>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
