<?xml version="1.0" encoding="UTF-8"?>
<sequence name="FileReceiving_Process_Seq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <log>
        <property expression="$trp:Content-Type" name="Content-Type"/>
    </log>
    <!-- 1. Reading the JSON attributes from the request payload; -->
    <switch source="$trp:Content-Type">
        <case regex="^(multipart\/form-data[; a-z=\-0-9]+)">
            <propertyGroup>
                <property expression="$body/mediate/fileContent/@filename" name="fileName" scope="default" type="STRING"/>
                <property expression="$body/mediate/writeToDir" name="writeToDir" scope="default" type="STRING"/>
            </propertyGroup>
            <payloadFactory media-type="xml">
                <format>
                    <ns:binary xmlns:ns="http://ws.apache.org/commons/ns/payload">$1</ns:binary>
                </format>
                <args>
                    <arg evaluator="xml" expression="$body/mediate/fileContent"/>
                </args>
            </payloadFactory>
        </case>
        <default>
            <propertyGroup>
                <property expression="json-eval($.fileName)" name="fileName" scope="default" type="STRING"/>
                <property expression="json-eval($.fileContent)" name="fileContent" scope="default" type="STRING"/>
                <property expression="json-eval($.writeToDir)" name="writeToDir" scope="default" type="STRING"/>
            </propertyGroup>
            <!-- 2. Creating the Payload for a binary payload. -->
            <payloadFactory media-type="xml">
                <format>
                    <ns:binary xmlns:ns="http://ws.apache.org/commons/ns/payload">$1</ns:binary>
                </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:fileContent"/>
                </args>
            </payloadFactory>
        </default>
    </switch>
    <!-- 3. Even using a binary payload, the Axis2 frameworks keeps considering 
		the payload as text. We use a script mediator to set the fist node as binary; -->
    <script language="js"><![CDATA[var binaryNode =       
      mc.getEnvelope().getBody().getFirstElement().getFirstOMChild();  
   binaryNode.setBinary(true);]]></script>
    <log>
        <property expression="$ctx:fileName" name="fileName"/>
    </log>
    <propertyGroup>
        <property expression="$ctx:fileName" name="transport.vfs.ReplyFileName" scope="transport" type="STRING"/>
        <property name="OUT_ONLY" scope="default" type="STRING" value="true"/>
        <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
        <property name="messageType" scope="axis2" type="STRING" value="application/octet-stream"/>
    </propertyGroup>
    <switch source="$ctx:writeToDir">
        <case regex="^(\/home\/wso2carbon\/wso2mi-4.0.0[\/a-z]+)">
            <call description="This writes the file to directory within MI_HOME dir, used for deployment a CAR apps">
                <endpoint>
                    <address uri="$ctx:writeToDir">
                        <suspendOnFailure>
                            <initialDuration>-1</initialDuration>
                            <progressionFactor>1</progressionFactor>
                        </suspendOnFailure>
                        <markForSuspension>
                            <retriesBeforeSuspension>0</retriesBeforeSuspension>
                        </markForSuspension>
                    </address>
                </endpoint>
            </call>
        </case>
        <default>
            <call description="This writes the received file into a pre-configured directory">
                <endpoint>
                    <address uri="$FILE:fileProcessing_tempDir">
                        <suspendOnFailure>
                            <initialDuration>-1</initialDuration>
                            <progressionFactor>1</progressionFactor>
                        </suspendOnFailure>
                        <markForSuspension>
                            <retriesBeforeSuspension>0</retriesBeforeSuspension>
                        </markForSuspension>
                    </address>
                </endpoint>
            </call>
        </default>
    </switch>
    <!-- 7. We define a success message to be the respose of the REST API request. -->
    <payloadFactory media-type="json">
        <format>
			{
			"status": "success",
			"statusMessage" : "Image Uploaded"
			}
		</format>
        <args/>
    </payloadFactory>
    <respond/>
</sequence>
